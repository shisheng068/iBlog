package com.function.iBlog.service.impl.captcha;

import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;

import com.aliyuncs.DefaultAcsClient;
import com.aliyuncs.IAcsClient;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;
import com.aliyuncs.exceptions.ClientException;
import com.aliyuncs.exceptions.ServerException;
import com.aliyuncs.http.MethodType;
import com.aliyuncs.profile.DefaultProfile;
import com.aliyuncs.profile.IClientProfile;
import com.function.iBlog.common.util.CharacterUtils;
import com.function.iBlog.common.util.CheckoutUtil;
import com.function.iBlog.service.captcha.ImgCaptchaService;
import com.function.iBlog.service.captcha.MsgCaptchaService;
import com.function.iBlog.vo.ReturnDto;

public class MsgCaptchaServiceImpl implements MsgCaptchaService
{
    
    private static String SESSION_ATTR_NAME_MSGCODE = "msgCode";
    
    @Autowired
    private ImgCaptchaService imgCaptchaService;

    @Override
    public ReturnDto sendMsgValicodeByImgValicode(String valicode,
	    String phoneNum, HttpSession session)
    {
	
	ReturnDto valicodeCheckRet = imgCaptchaService.checkImgValicode(valicode, session, true);
	if(!valicodeCheckRet.isSuccess())
	{
	    return valicodeCheckRet;
	}
	
	ReturnDto ret = sendMsgValicode(phoneNum, session);
	return ret;
    }

    /**
     * 发送手机验证码至指定手机号
     * @param phoneNum
     * @param session
     * @return
     */
    private static ReturnDto sendMsgValicode(String phoneNum,HttpSession session)
    {
	ReturnDto ret = new ReturnDto();
	//验证手机号是否合法
	if(!CheckoutUtil.trueMobiPhoneNum(phoneNum))
	{
	    ret.setMsg("错误的手机号");
	    ret.setReturnCode("errorPhoneNum");
	    ret.setSuccess(false);
	    
	    return ret;
	}
	
	String msgValicode = CharacterUtils.getRandomNumString(6);
	if(null == msgValicode||StringUtils.isEmpty(msgValicode))
	{
	    Random rand = new Random();
	    
	    msgValicode = ""+(100000+rand.nextInt(900000));
	}
	
	//设置超时时间-可自行调整
	System.setProperty("sun.net.client.defaultConnectTimeout", "10000");
	System.setProperty("sun.net.client.defaultReadTimeout", "10000");
	//初始化ascClient需要的几个参数
	final String product = "Dysmsapi";//短信API产品名称（短信产品名固定，无需修改）
	final String domain = "dysmsapi.aliyuncs.com";//短信API产品域名（接口地址固定，无需修改）
	//替换成你的AK
	final String accessKeyId = "LTAIhN4ReQSZXiDO";//你的accessKeyId,参考本文档步骤2
	final String accessKeySecret = "rFjdRTGr0j6u54k3G9388QACNlFSdD";//你的accessKeySecret，参考本文档步骤2
	//初始化ascClient,暂时不支持多region（请勿修改）
	IClientProfile profile = DefaultProfile.getProfile("cn-hangzhou", accessKeyId,
	accessKeySecret);
	try
	{
	    DefaultProfile.addEndpoint("cn-hangzhou", "cn-hangzhou", product, domain);
	} catch (ClientException e)
	{
	    ret.setMsg("手机验证码发送出错");
	    ret.setReturnCode("errorSendMsg");
	    ret.setSuccess(false);
	    
	    e.printStackTrace();
	    
	    return ret;
	}
	IAcsClient acsClient = new DefaultAcsClient(profile);
	//组装请求对象
	SendSmsRequest request = new SendSmsRequest();
	//使用post提交
	request.setMethod(MethodType.POST);
	//必填:待发送手机号。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式
	request.setPhoneNumbers(phoneNum);
	//必填:短信签名-可在短信控制台中找到
	request.setSignName("iBlog博客");
	//必填:短信模板-可在短信控制台中找到
	request.setTemplateCode("SMS_129740712");
	//可选:模板中的变量替换JSON串,如模板内容为"亲爱的${name},您的验证码为${code}"时,此处的值为
	//友情提示:如果JSON中需要带换行符,请参照标准的JSON协议对换行符的要求,比如短信内容中包含\r\n的情况在JSON中需要表示成\\r\\n,否则会导致JSON在服务端解析失败
	request.setTemplateParam("{\"code\":\""+msgValicode+"\"}");
	//可选-上行短信扩展码(扩展码字段控制在7位或以下，无特殊需求用户请忽略此字段)
	//request.setSmsUpExtendCode("90997");
	//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者
	request.setOutId("senMsg");
	//请求失败这里会抛ClientException异常
	SendSmsResponse sendSmsResponse;
	try
	{
	    sendSmsResponse = acsClient.getAcsResponse(request);
	    if(sendSmsResponse.getCode() != null && sendSmsResponse.getCode().equals("OK")) 
	    {
		//请求成功
		ret.setMsg("手机验证码发送成功");
		ret.setReturnCode("success");
		ret.setSuccess(true);
		if(null != session)
		{
		    session.setAttribute(SESSION_ATTR_NAME_MSGCODE, msgValicode);
		}
		
		return ret;
	    }
	    
	} catch (ServerException e)
	{
	    ret.setMsg("手机验证码发送出错");
	    ret.setReturnCode("errorSendMsg");
	    ret.setSuccess(false);
	    
	    e.printStackTrace();
	    return ret;
	} catch (ClientException e)
	{
	    ret.setMsg("手机验证码发送出错");
	    ret.setReturnCode("errorSendMsg");
	    ret.setSuccess(false);
	    
	    e.printStackTrace();
	    return ret;
	}
	
	ret.setMsg("手机验证码发送出错");
	ret.setReturnCode("errorSendMsg");
	ret.setSuccess(false);
	    
	return ret;
    }
    
    public static void main(String[] args){  
	ReturnDto ret = sendMsgValicode("15002128673",null);
	System.out.println(ret.getMsg());
    }

    @Override
    public ReturnDto checkMsgValicode(String msgValicode, HttpSession session,
	    boolean flashMsgValicode)
    {
	ReturnDto ret = new ReturnDto();
	
	String trueMsgValicode = (String) session.getAttribute(SESSION_ATTR_NAME_MSGCODE);
	if(null==trueMsgValicode||StringUtils.isEmpty(trueMsgValicode)
		||null==msgValicode||StringUtils.isEmpty(msgValicode))
	{
	    ret.setMsg("手机验证码错误");
	    ret.setReturnCode("errorMsgValicode");
	    ret.setSuccess(false);
	    return ret;
	}
	
	msgValicode = msgValicode.trim();
	
	if(msgValicode.equals(trueMsgValicode))
	{
	    ret.setMsg("手机验证码正确");
	    ret.setReturnCode("success");
	    ret.setSuccess(true);
	    
	    if(flashMsgValicode)
	    {
		session.setAttribute(SESSION_ATTR_NAME_MSGCODE, null);
	    }
	    
	    return ret;
	}

	ret.setMsg("手机验证码错误");
	ret.setReturnCode("errorMsgValicode");
	ret.setSuccess(false);
	return ret;
    }  

}
